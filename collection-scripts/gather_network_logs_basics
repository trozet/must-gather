#!/bin/bash

source $(dirname "$0")/common.sh
get_log_collection_args

BASE_COLLECTION_PATH="must-gather"
NETWORK_LOG_PATH=${OUT:-"${BASE_COLLECTION_PATH}/network_logs"}
OVNK_DATABASE_STORE_PATH=${OUT:-"ovnk_database_store"}
OVNK_IPSEC_PATH=${OUT:-"ipsec"}

mkdir -p "${NETWORK_LOG_PATH}"/

function gather_multus_data {
  local resources=(ippools.whereabouts.cni.cncf.io overlappingrangeipreservations.whereabouts.cni.cncf.io \
      net-attach-def multi-networkpolicy)

  for resource in "${resources[@]}"; do
    oc adm inspect ${log_collection_args} --dest-dir "${BASE_COLLECTION_PATH}" "${resource}" --all-namespaces 2>&1 || true & PIDS+=($!)
    oc describe "${resource}" -A > "${NETWORK_LOG_PATH}"/"${resource}" 2>&1 || true & PIDS+=($!)
  done
}

function gather_ovn_kubernetes_data_interconnect_mode {
  echo "INFO: Gathering ovn-kubernetes DBs"
  OVNKUBE_CONTROLLER_PODS=($(oc -n ovn-kubernetes get pods -l app=ovnkube-node -o=jsonpath='{.items[*].metadata.name}'))
  # collect dbs from each node
  for DB in "n" "s"; do
    if [ "$DB" = "n" ]; then
      DB_NAME="OVN_Northbound"
      CONTAINER="nb-ovsdb"
    else
      DB_NAME="OVN_Southbound"
      CONTAINER="sb-ovsdb"
    fi
    for OVNKUBE_CONTROLLER_POD in "${OVNKUBE_CONTROLLER_PODS[@]}"; do
      echo "INFO: Gathering "${DB_NAME}" from "${OVNKUBE_CONTROLLER_POD}"..."
      oc cp ovn-kubernetes/"${OVNKUBE_CONTROLLER_POD}":/etc/ovn/ovn"${DB}"b_db.db -c "${CONTAINER}" \
        "${NETWORK_LOG_PATH}/${OVNK_DATABASE_STORE_PATH}/${OVNKUBE_CONTROLLER_POD}_${DB}bdb" 2>&1 & PIDSDB+=($!)
    done
  done
}

function gather_ovn_kubernetes_data_legacy_mode {
  echo "INFO: Gathering ovn-kubernetes data for centralized OVN"

  # Detect deployment mode automatically
  if [[ -n $(oc -n ovn-kubernetes get pods -l name=ovnkube-db -o jsonpath='{.items[*].metadata.name}' 2>/dev/null) ]]; then
    echo "INFO: OVN DB is running combined with ovnkube-master"
    # Combined DB mode
    DEPLOY_MODE="combined"
    OVNKUBE_MASTER_PODS=($(oc -n ovn-kubernetes get pods -l name=ovnkube-db -o=jsonpath='{.items[*].metadata.name}'))
  else
    # Split DB mode
    echo "INFO: OVN DB is running standalone"
    DEPLOY_MODE="split"
    OVN_NBDB_PODS=($(oc -n ovn-kubernetes get pods -l name=ovn-nbdb -o=jsonpath='{.items[*].metadata.name}'))
    OVN_SBDB_PODS=($(oc -n ovn-kubernetes get pods -l name=ovn-sbdb -o=jsonpath='{.items[*].metadata.name}'))
  fi

  # collect only leader dbs to reduce result size
  for DB in "n" "s"; do
    if [ "$DB" = "n" ]; then
      DB_NAME="OVN_Northbound"
      if [ "$DEPLOY_MODE" = "combined" ]; then
        CONTAINER="nb-ovsdb"
        DB_PODS=("${OVNKUBE_MASTER_PODS[@]}")
      else
        CONTAINER="nbdb"
        DB_PODS=("${OVN_NBDB_PODS[@]}")
      fi
    else
      DB_NAME="OVN_Southbound"
      if [ "$DEPLOY_MODE" = "combined" ]; then
        CONTAINER="sb-ovsdb"
        DB_PODS=("${OVNKUBE_MASTER_PODS[@]}")
      else
        CONTAINER="sbdb"
        DB_PODS=("${OVN_SBDB_PODS[@]}")
      fi
    fi
    i=0
    PODS_AMOUNT=${#DB_PODS[@]}
    if (( PODS_AMOUNT == 0 )); then
      echo "WARNING: No pods found for ${DB_NAME}"
      continue
    fi
    # try 2 cycles in case leader has changed during first pass
    while (( i < 2 * PODS_AMOUNT )) ; do
      DB_POD=${DB_PODS[$(( i % PODS_AMOUNT ))]}
      # find leader to copy db
      RAFT_ROLE=$(oc exec -n ovn-kubernetes "${DB_POD}" -c "${CONTAINER}" -- bash -c \
        "ovn-appctl -t /var/run/ovn/ovn${DB}b_db.ctl cluster/status ${DB_NAME} 2>&1 | grep \"^Role\"")
      if echo "${RAFT_ROLE}" | grep -q -i leader; then
        oc cp ovn-kubernetes/"${DB_POD}":/etc/ovn/ovn"${DB}"b_db.db -c "${CONTAINER}" \
         "${NETWORK_LOG_PATH}/leader_${DB}bdb" 2>&1
        gzip "${NETWORK_LOG_PATH}/leader_${DB}bdb" 2>&1 & PIDS+=($!)

        oc exec -n ovn-kubernetes "${DB_POD}" -c "${CONTAINER}" -- bash -c \
          "ovn-appctl -t /var/run/ovn/ovn${DB}b_db.ctl cluster/status ${DB_NAME}" > \
          "${NETWORK_LOG_PATH}/leader_ovn${DB}b_status" & PIDS+=($!)
        break
      fi
      ((i++))
    done
  done
}

function gather_ovn_kubernetes_ipsec_data {
  echo "INFO: Gathering ovn-kubernetes IPsec data"
  OVNKUBE_IPSEC_PODS=($(oc -n ovn-kubernetes get pods -l app=ovn-ipsec -o=jsonpath='{.items[*].metadata.name}'))
  CONTAINER="ovn-ipsec"
  mkdir -p "${NETWORK_LOG_PATH}/${OVNK_IPSEC_PATH}/xfrm" "${NETWORK_LOG_PATH}/${OVNK_IPSEC_PATH}/status" "${NETWORK_LOG_PATH}/${OVNK_IPSEC_PATH}/trafficstatus"
  for OVNKUBE_IPSEC_POD in "${OVNKUBE_IPSEC_PODS[@]}"; do
    if [[ "${OVNKUBE_IPSEC_POD}" == *"containerized"* ]]; then
      oc cp ovn-kubernetes/"${OVNKUBE_IPSEC_POD}":/var/log/openvswitch/libreswan.log -c "${CONTAINER}" \
        "${NETWORK_LOG_PATH}/${OVNK_IPSEC_PATH}/${OVNKUBE_IPSEC_POD}_libreswan.log" 2>&1 & PIDS+=($!)
    fi
    oc cp ovn-kubernetes/"${OVNKUBE_IPSEC_POD}":/etc/ipsec.conf -c "${CONTAINER}" \
      "${NETWORK_LOG_PATH}/${OVNK_IPSEC_PATH}/${OVNKUBE_IPSEC_POD}_ipsec.conf" 2>&1 & PIDS+=($!)
    oc cp ovn-kubernetes/"${OVNKUBE_IPSEC_POD}":/etc/ipsec.d -c "${CONTAINER}" \
      "${NETWORK_LOG_PATH}/${OVNK_IPSEC_PATH}/${OVNKUBE_IPSEC_POD}_ipsec.d" 2>&1 & PIDS+=($!)
    oc exec -n ovn-kubernetes "${OVNKUBE_IPSEC_POD}" -c "${CONTAINER}" -- bash -c \
      "ip xfrm state" > \
      "${NETWORK_LOG_PATH}/${OVNK_IPSEC_PATH}/xfrm/${OVNKUBE_IPSEC_POD}_state.log" & PIDS+=($!)
    oc exec -n ovn-kubernetes "${OVNKUBE_IPSEC_POD}" -c "${CONTAINER}" -- bash -c \
      "ip xfrm policy" > \
      "${NETWORK_LOG_PATH}/${OVNK_IPSEC_PATH}/xfrm/${OVNKUBE_IPSEC_POD}_policy.log" & PIDS+=($!)
    oc exec -n ovn-kubernetes "${OVNKUBE_IPSEC_POD}" -c "${CONTAINER}" -- bash -c \
      "ipsec whack --status" > \
      "${NETWORK_LOG_PATH}/${OVNK_IPSEC_PATH}/status/${OVNKUBE_IPSEC_POD}.log" & PIDS+=($!)
    oc exec -n ovn-kubernetes "${OVNKUBE_IPSEC_POD}" -c "${CONTAINER}" -- bash -c \
      "ipsec whack --trafficstatus" > \
      "${NETWORK_LOG_PATH}/${OVNK_IPSEC_PATH}/trafficstatus/${OVNKUBE_IPSEC_POD}.log" & PIDS+=($!)
  done
}

function gather_ovn_kubernetes_data {
  sample_node=$(oc get no -o jsonpath='{.items[0].metadata.name}')
  sample_node_zone=$(oc get node "${sample_node}" -o jsonpath='{.metadata.annotations.k8s\.ovn\.org/zone-name}')
  if [ "${sample_node}" = "${sample_node_zone}" ]; then
    echo "INFO: INTERCONNECT MODE"
    INTERCONNECT=true
    gather_ovn_kubernetes_data_interconnect_mode
  else
    echo "INFO: LEGACY MODE"
    INTERCONNECT=false
    gather_ovn_kubernetes_data_legacy_mode
  fi
  # FIXME(trozet)
  IPSEC_CONFIG=$(oc get networks.operator.openshift.io cluster -o jsonpath='{.spec.defaultNetwork.ovnKubernetesConfig.ipsecConfig}')
  IPSEC_MODE=$(oc get networks.operator.openshift.io cluster -o jsonpath='{.spec.defaultNetwork.ovnKubernetesConfig.ipsecConfig.mode}')
  if [ "$IPSEC_CONFIG" == "{}" ] || [ "$IPSEC_MODE" != "" ] && [ "$IPSEC_MODE" != "Disabled" ]; then
    gather_ovn_kubernetes_ipsec_data
  fi
  oc adm top pods -n ovn-kubernetes --containers > "${NETWORK_LOG_PATH}"/ovn_kubernetes_top_pods & PIDS+=($!)
}

function gather_scale_data {
  touch "${NETWORK_LOG_PATH}"/cluster_scale
  echo services amount: $(oc get svc --no-headers -A | wc -l) >> "${NETWORK_LOG_PATH}"/cluster_scale & PIDS+=($!)
  echo endpoints amount: $(oc get ep --no-headers -A | wc -l) >> "${NETWORK_LOG_PATH}"/cluster_scale & PIDS+=($!)
  echo pods amount: $(oc get pods --no-headers -A | wc -l) >> "${NETWORK_LOG_PATH}"/cluster_scale & PIDS+=($!)
  echo network policies amount: $(oc get networkpolicies --no-headers -A | wc -l) >> "${NETWORK_LOG_PATH}"/cluster_scale & PIDS+=($!)
  if [[ "${NETWORK_TYPE}" == "ovnkubernetes" ]]; then
    echo egress firewalls amount: $(oc get egressfirewalls --no-headers -A | wc -l) >> "${NETWORK_LOG_PATH}"/cluster_scale & PIDS+=($!)
  fi
}

function safe_wait {
  local p
  for p in "$@"; do
    if kill -0 "$p" 2>/dev/null; then
      wait "$p" 2>/dev/null || true
    fi
  done
}

PIDS=()
PIDSDB=()
NETWORK_TYPE=$(oc get network.config.openshift.io -o=jsonpath='{.items[0].spec.networkType}' | tr '[:upper:]' '[:lower:]')

gather_multus_data
gather_scale_data

oc adm inspect ${log_collection_args} --dest-dir must-gather egressips.k8s.ovn.org
oc adm inspect ${log_collection_args} --dest-dir must-gather clusteruserdefinednetworks.k8s.ovn.org
oc adm inspect ${log_collection_args} --dest-dir must-gather adminnetworkpolicies.policy.networking.k8s.io
oc adm inspect ${log_collection_args} --dest-dir must-gather baselineadminnetworkpolicies.policy.networking.k8s.io
gather_ovn_kubernetes_data

CNCC_DEPLOYMENT=$(oc get deployment -n openshift-cloud-network-config-controller --no-headers -o custom-columns=":metadata.name")
if [[ "${CNCC_DEPLOYMENT}" == "cloud-network-config-controller" ]]; then
  oc adm inspect ${log_collection_args} --dest-dir must-gather cloudprivateipconfigs.cloud.network.openshift.io
fi

ROUTE_ADVERTISEMENTS=$(oc get network.operator.openshift.io cluster -o=jsonpath='{.spec.defaultNetwork.ovnKubernetesConfig.routeAdvertisements}')
if [[ "${ROUTE_ADVERTISEMENTS}" == "Enabled" ]]; then
    oc adm inspect ${log_collection_args} --dest-dir must-gather routeadvertisements.k8s.ovn.org
fi

echo "INFO: Waiting for network log collection to complete ..."
echo "INFO: Waiting for ovnk database copies to complete ..."
safe_wait "${PIDSDB[@]}"
echo "INFO: Copying ovnk databases complete."
# Only archive ovnk_database_store if it exists (interconnect mode)
if [ "$INTERCONNECT" = true ]; then
  echo "INFO: Running interconnect-specific post-processing..."
  du -sh "${NETWORK_LOG_PATH}/${OVNK_DATABASE_STORE_PATH}"
  tar -zcvf "${NETWORK_LOG_PATH}/${OVNK_DATABASE_STORE_PATH}.tar.gz" \
        -C "${NETWORK_LOG_PATH}" "${OVNK_DATABASE_STORE_PATH}" --remove-files 2>&1 & PIDS+=($!)
else
    echo "INFO: No ovnk_database_store found (legacy mode), skipping database archive."
fi
safe_wait "${PIDS[@]}"
echo "INFO: Network log collection complete."

# force disk flush to ensure that all data gathered is accessible in the copy container
sync
